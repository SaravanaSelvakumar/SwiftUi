
import SwiftUI
import UIKit
import AVFoundation
import IQKeyboardManagerSwift
import CountryPicker
import SDWebImageSwiftUI


struct SL0050View: View {
    
    @State private var sourceType: UIImagePickerController.SourceType = .photoLibrary
    @State private var showImagePicker = false
    @State private var showActionSheet = false
    @State private var showData = false
    @State var showCountryPicker = false
    
    @FocusState private var focusedField: CustomerTextField?
    @Environment(\.presentationMode) var presentationMode
    @EnvironmentObject var alertViewModel: AlertViewModel
    @State var viewModel = EditProfileViewModel()
    
    var body: some View {
        let profileData = viewModel.editProfileData
        NavigationStack {
            VStack(spacing: 0) {
                SL0101View(title: "Profile", showBackButton: true)
                ScrollView(showsIndicators: false) {
                    
                    VStack {
                        ProfileReusePhotoView(data: profileData.profileImageProperty ?? CollectionComponent(),
                                              profileData: viewModel.profileData,
                                              selectedImage: viewModel.selectedImages.first,
                                              cameraAction: {
                            showActionSheet = true
                        })
                        .frame(maxWidth: .infinity, maxHeight: 200)
                        .padding(.vertical, 20)
                        
                        VStack(alignment: .leading, spacing: 0) {
                            /// Name Text field
                            HStack(spacing: 15) {
                                if let firstNameProperty = profileData.nameProperty?.firstProperty {
                                    CustomerTextFieldReuseView(titleProperty: firstNameProperty.firstProperty ?? Property(),
                                                               textFieldProperty: firstNameProperty.secondProperty ?? Property(),
                                                               keyBoardType: .alphabet,
                                                               text: $viewModel.firstName)
                                    .focused($focusedField, equals: .name)
                                    .submitLabel(.next)
                                    .onSubmit {
                                        focusedField = .lastName
                                    }
                                }
                                
                                if let secondNameProperty = profileData.nameProperty?.secondProperty {
                                    CustomerTextFieldReuseView(titleProperty: secondNameProperty.firstProperty ?? Property(),
                                                               textFieldProperty: secondNameProperty.secondProperty ?? Property(),
                                                               keyBoardType: .alphabet,
                                                               text: $viewModel.lastName)
                                    .focused($focusedField, equals: .lastName)
                                    .submitLabel(.next)
                                    .onSubmit {
                                        focusedField = .mobileNumber
                                    }
                                }
                            }
                            
                            /// Mobile Number Text field
                            VStack(alignment: .leading) {
                                if let mobileProperty = profileData.phoneNumberProperty {
                                    let titleProperty = mobileProperty.firstProperty
                                    Text(titleProperty?.data ?? "Phone Number")
                                        .font(.custom(titleProperty?.style.getFont ?? "Inter-SemiBold", size: titleProperty?.style.getFontSize ?? 14))
                                        .foregroundStyle(Color(hex: titleProperty?.style.color ?? "333333"))
                                        .padding(.bottom, 2)
                                    
                                    HStack {
                                        HStack(alignment: .center, spacing: 5) {
                                            Image(uiImage: viewModel.country.flag ?? UIImage())
                                                .resizable()
                                                .frame(width: 25, height: 25)
                                                .cornerRadius(5)
                                                .padding(8)
                                                .clipped()
                                            
                                            Image(systemName: "chevron.down")
                                                .foregroundColor(Color(hex: "6C7278"))
                                                .frame(width: 8, height: 4)
                                                .padding(.vertical)
                                            
                                            Divider()
                                                .padding(.horizontal, 3)
                                        }
                                        .onTapGesture {
                                            showCountryPicker.toggle()
                                        }
                                        .sheet(isPresented: $showCountryPicker) {
                                            CountryPickerView(
                                                selectedCountry: $viewModel.country
                                            )
                                        }
                                        
                                        if let placeHolderProperty = mobileProperty.secondProperty {
                                            TextField((viewModel.profileData.phoneNo == "" ? placeHolderProperty.data : viewModel.profileData.phoneNo), text: $viewModel.mobileNumber)
                                                .font(.custom(placeHolderProperty.style.getFont,
                                                              size: placeHolderProperty.style.getFontSize))
                                                .keyboardType(.numberPad)
                                                .focused($focusedField, equals: .mobileNumber)
                                                .submitLabel(.next)
                                                .onChange(of: viewModel.mobileNumber) { newValue in
                                                    let filtered = newValue.filter { $0.isNumber }
                                                    if filtered.count > 10 {
                                                        viewModel.mobileNumber = String(filtered.prefix(10))
                                                    } else {
                                                        viewModel.mobileNumber = filtered
                                                    }
                                                }
                                                .onSubmit {
                                                    focusedField = .email
                                                }
                                                .padding(.leading, 2)
                                        }
                                        
                                    }
                                    .background(
                                        RoundedRectangle(cornerRadius: 10)
                                            .stroke(Color(hex: "EDF1F3"), lineWidth: 2)
                                    )
                                }
                            }
                            .padding(.top, 24)
                            
                            
                            /// Email Text field
                            if let emailProperty = profileData.emailProperty {
                                CustomerTextFieldReuseView(titleProperty: emailProperty.firstProperty ?? Property(),
                                                           textFieldProperty: emailProperty.secondProperty ?? Property(),
                                                           keyBoardType: .emailAddress,
                                                           text: $viewModel.email)
                                .disabled(true)
                                .padding(.top, 20)
                                .focused($focusedField, equals: .email)
                                .submitLabel(.next)
                                .onSubmit {
                                    focusedField = .dob
                                }
                            }
                            
                            /// DOB Text field
                            if let dobProperty = profileData.dobProperty {
                                DateTextFieldReuseView(titleProperty: dobProperty.firstProperty ?? Property(),
                                                       textFieldProperty: dobProperty.secondProperty ?? Property(),
                                                       keyBoardType: .numberPad,
                                                       text: $viewModel.dob)
                                .padding(.top, 24)
                                .focused($focusedField, equals: .dob)
                                .submitLabel(.next)
                                .onSubmit {
                                    focusedField = nil
                                }
                            }
                            
                            /// Gender Picker View
                            if let genderProperty = profileData.genderProperty {
                                GenderView(
                                    titleProperty: genderProperty.firstProperty ?? Property(),
                                    selectedGender: $viewModel.gender,
                                    formats: ["Male", "Female", "Other"] // Add genders or dynamic values here
                                )
                                .padding(.top, 20)
                            }
                            
                            
                            if let signUpButtonProperty = profileData.secondDataProperty {
                                Button(action: {
                                    if let selectedImage = viewModel.selectedImages.first {
                                        uploadUIImage(image: selectedImage)
                                    } else {
                                        viewModel.validateForProfile()
                                    }
                                    
                                }) {
                                    Text("Update")
                                        .font(.custom("Inter-SemiBold", size: 18))
                                        .frame(maxWidth: .infinity)
                                        .frame(height: 60)
                                        .foregroundColor(.white)
                                        .background(Color(hex: "28AA7E"))
                                        .cornerRadius(8)
                                        .padding(.top, 30)
                                        .padding(.bottom)
                                }
                            }
                        }
                        .padding(.horizontal, 20)
                        //                    }
                        .toolbar {
                            ToolbarItemGroup(placement: .keyboard) {
                                Spacer()
                                Button("Done") {
                                    focusedField = nil
                                }
                            }
                        }
                    } /// End of VStack
                    .background(Color(hex: profileData.properties.first(where: {$0.id == "1"})?.style.color ?? "FFFFFF"))
                    .alert(isPresented: $viewModel.alertViewModel.showAlert) {
                        if viewModel.alertViewModel.alertTitle == "Success" {
                            return Alert(
                                title: Text(viewModel.alertViewModel.alertTitle),
                                message: Text(viewModel.alertViewModel.alertMessage),
                                dismissButton: .default(Text("OK"), action: {
                                    presentationMode.wrappedValue.dismiss()
                                })
                            )
                        } else {
                            return  Alert(
                                title: Text(viewModel.alertViewModel.alertTitle),
                                message: Text(viewModel.alertViewModel.alertMessage),
                                dismissButton: .default(Text("OK"))
                            )
                        }
                    }
                    Spacer()
                }
                .frame(maxWidth: .infinity, maxHeight: .infinity)
                //            .navigationBarTitle("Profile", displayMode: .inline)
                //            .navigationBarBackButtonHidden(false)
                .navigationBarHidden(true)
                .actionSheet(isPresented: $showActionSheet) {
                    ActionSheet(
                        title: Text("Select an option"),
                        message: Text("Choose a source"),
                        buttons: [
                            .default(Text("Camera")) {
                                CameraAndPhotoPickerView.checkCameraPermission { granted in
                                    sourceType = .camera
                                    if granted {
                                        showImagePicker = true
                                    } else {
                                        viewModel.alertViewModel.displayAlert(title: "Camera Access Needed", message: "Please allow camera access in settings to take photos.")
                                    }
                                }
                            },
                            .default(Text("Photo Library")) {
                                sourceType = .photoLibrary
                                showImagePicker = true
                            },
                            .cancel()
                        ]
                    )
                }
                .fullScreenCover(isPresented: $showImagePicker) {
                    CameraAndPhotoPickerView(selectedImage: $viewModel.selectedImages,
                                             selectedImageUrls: $viewModel.selectedImageUrls,
                                             sourceType: sourceType)
                    .onAppear{
                        viewModel.selectedImages.removeAll()
                        viewModel.selectedImageUrls.removeAll()
                    }
                }
                .onAppear {
                    viewModel.alertViewModel = alertViewModel
                    viewModel.addObserver()
                    viewModel.fetchScreenLayoutDetails()
                    viewModel.fetchCustomerProfileDetails()
                }
            }
        }
        .ignoresSafeArea(.all)
    }
    func uploadUIImage(image: UIImage) {
        Utils.uploadMedia(message: Message(), files: viewModel.selectedImageUrls) { urlString in
            viewModel.updateCustomerProfile(profileImage: urlString.first ?? "")
        }
    }
    
}

struct ProfileReusePhotoView: View {
    @Bindable var data : CollectionComponent
    @Bindable var profileData : UserDetailData
    @State private var url: URL?
    var selectedImage: UIImage?
    var cameraAction: () -> Void
    
    var body: some View {
        let profileUiData = data.firstProperty
        let profileIcon = data.secondProperty?.subProperties
        ZStack {
            if let selectedImage = selectedImage {
                Image(uiImage: selectedImage)
                    .resizable()
                    .aspectRatio(contentMode: .fill)
                    .frame(width: 120, height: 128)
                    .clipShape(Circle())
                    .overlay{
                        Circle()
                            .strokeBorder(Color(hex: "28AA7E"), lineWidth: 1)
                    }
            } else if let firstImageUrlString = profileData.profileImageUrl,
                      let url = URL(string: firstImageUrlString) {
                WebImage(url: url) { image in
                    image
                        .resizable()
                        .aspectRatio(contentMode: .fill)
                        .frame(width: 120, height: 128)
                        .clipShape(Circle())
                } placeholder: {
                    PlaceholderImageView()
                }
            } else {
                PlaceholderImageView()
            }
        }
        .overlay(
            Button(action: {
                cameraAction()
            }) {
                let borderData = profileIcon?.first(where: { $0.id == "1"})
                let bgData = profileIcon?.first(where: { $0.id == "2"})
                let iconData = profileIcon?.first(where: { $0.id == "3"})
                RemoteSVGView(url: $url)
                    .frame(width: 18, height: 18)
                    .padding(11)
                    .background(
                        Circle()
                            .fill(Color(hex: bgData?.style.color ?? "FFFFFF"))
                    )
                    .overlay {
                        Circle()
                            .strokeBorder(Color(hex: borderData?.style.color ?? "28AA7E"), lineWidth: borderData?.style.getSize ?? 1)
                    }
                    .padding(.trailing, 2)
                    .onChange(of: iconData) {
                        if let iconURL = URL(string: iconData?.data ?? "") {
                            self.url = iconURL
                        }
                    }
            },
            alignment: .bottomTrailing
        )
    }
    
    func PlaceholderImageView() -> some View {
        Image(systemName: "person.crop.circle.fill")
            .resizable()
            .aspectRatio(contentMode: .fill)
            .frame(width: 120, height: 128)
            .clipShape(Circle())
            .foregroundStyle(Color(hex: "DADADA"))
    }
}

struct GenderView: View {
    let titleProperty: Property
    @Binding var selectedGender: String
    let formats: [String]
    
    @State private var showingPicker = false
    
    var body: some View {
        VStack(alignment: .leading) {
            
            Text(titleProperty.data)
                .font(.custom("Inter-Medium", size: DeviceType(rawValue: DEVICE)!.smallFontSize))
                .foregroundStyle(Color(hex: "787878"))
            
            
            HStack {
                Text(selectedGender.isEmpty ? "Select your Gender" : selectedGender)
                    .foregroundStyle(selectedGender.isEmpty ? Color.gray : Color(hex: "252B42"))
                    .font(.system(size: DeviceType(rawValue: DEVICE)!.mediumFontSize, weight: .medium))
                
                Spacer()
                
                Image(systemName: "chevron.down")
                    .foregroundColor(Color(hex: "8D8D8D"))
            }
            .padding(.vertical, 11)
            .padding(.horizontal)
            .frame(maxWidth: .infinity, minHeight: 50, alignment: .leading)
            .background(
                RoundedRectangle(cornerRadius: 10)
                    .stroke(Color(hex: "8D8D8D").opacity(0.2), lineWidth: 1)
                    .background(Color.white.cornerRadius(10))
            )
            .onTapGesture {
                showingPicker = true
            }
        }
        .padding(.bottom)
        .sheet(isPresented: $showingPicker) {
            GenderPickerView(selectedGender: $selectedGender,
                             formats: formats,
                             showingPicker: $showingPicker,
                             title: "Select Your Gender")
                .presentationDetents([.height(320)])
        }
    }
}

/// Computed property to get Gender
struct GenderPickerView: View {
    @Binding var selectedGender: String
    let formats: [String]
    @Binding var showingPicker: Bool
    let title: String
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack {
                    ForEach(formats, id: \.self) { format in
                        Button(action: {
                            selectedGender = format
                            showingPicker = false
                        }) {
                            Text(format)
                                .foregroundStyle(Color(hex: "252B42"))
                                .padding()
                                .frame(maxWidth: .infinity)
                                .background(Color.gray.opacity(0.1))
                                .cornerRadius(8)
                        }
                    }
                }
                .padding()
            }
            .navigationBarTitle(title, displayMode: .inline)
            .navigationBarItems(trailing: Button(action: {
                showingPicker = false
            }) {
                Image(systemName: "xmark")
                    .font(.system(size: 15, weight: .bold))
                    .foregroundColor(.black)
            })
        }
    }
}

//////////////////////////////            API CLASS VIEW MODEL         /////////////////////////////////////////

import SwiftUI
import Observation
import CountryPicker

@Observable
class EditProfileViewModel: BaseViewModel {
    var layoutData = LayoutData()
    var editProfileData = CategoriesModel()
    var collectionArray = [CollectionComponent]()
    var alertViewModel = AlertViewModel()
    var profileData = UserDetailData()
    var updateProfileData = SaveProfileResponse()
    var isApiCall = false

    var selectedImages = [UIImage]()
    var selectedImageUrls = [String]()
    var profileImage = String()
    var firstName = String()
    var lastName = String()
    var mobileNumber = String()
    var countryCode = "+91"
    var email = String()
    var dob = String()
    var gender = String()
    var userName: String {
        return "\(firstName) \(lastName)"
    }
    var phoneNoCC: String {
        return (country.dialingCode ?? countryCode) + mobileNumber
    }
    var country: Country = Country(countryCode: "IN")

func fetchCustomerProfileDetails() {
        DataManager.sharedInstance().fetchCustomerProfileDetails(customerId: "fed68c2a-bf79-4a1d-9028-6692c342419a", completionHandler: {[self] error, response in
            DispatchQueue.main.async { [self] in
                if let error = error  {
                    alertViewModel.displayAlert(message: error.localizedDescription)
                } else if let data = response?.data {
                    Utils.customerData = data
                    profileData = data
                    firstName = profileData.firstName
                    lastName = profileData.lastName
                    mobileNumber = profileData.phoneNo
                    email = profileData.email
                    dob = profileData.dob
                    gender = profileData.gender.capitalized
                } else {
                    print("No Data found")
                }
            }
        })
    }

    func updateCustomerProfile(profileImage: String) {
        
        var param = [
            "storeId": CustomUserDefaults.SelectedStoreId ?? ""
        ] as [String : Any]
        if firstName != profileData.firstName {
            param["firstName"] = firstName
        }
        if lastName != profileData.lastName {
            param["lastName"] = lastName
        }
        if mobileNumber != profileData.phoneNo {
            param["phoneNoCC"] = "\(countryCode + mobileNumber)"
            param["phoneNo"] = mobileNumber
        }
        if !profileImage.isEmpty {
            if profileImage !=  profileData.profileImageUrl  {
                param["profileImageUrl"] = profileImage
            }
        }
   
        if gender.lowercased() != profileData.gender.lowercased() {
            param["gender"] = gender.uppercased()
        }
        if dob != profileData.dob {
            param["dob"] = dob
        }
        
        DataManager.sharedInstance().updateCustomerProfile(customerId: CustomUserDefaults.CustomerId ?? "", parameter: param, completionHandler: {[self] error, response in
            DispatchQueue.main.async { [self] in
                if let error = error  {
                    alertViewModel.displayAlert(message: error.localizedDescription)
                } else if let response = response {
                    print("Success")
                    alertViewModel.displayAlert(title: "Success", message: "Your profile has been updated successfully")
                } else {
                    print("No Data found")
                }
            }
        })
    }
    
    func validateForProfile() {
        if firstName.isEmpty {
            alertViewModel.displayAlert(message: "First Name cannot be empty." )
            return
        } else if lastName.isEmpty {
            alertViewModel.displayAlert(message: "Last Name cannot be empty." )
            return
        } else if email.isEmpty {
            alertViewModel.displayAlert(message: "Email cannot be empty." )
            return
        } else if !isValidEmail(email) {
            alertViewModel.displayAlert(message: "Please enter a valid email address.")
            return
        } else if dob.isEmpty {
            alertViewModel.displayAlert(message: "Date of Birth cannot be empty." )
            return
        } else if mobileNumber.isEmpty {
            alertViewModel.displayAlert(message: "Phone Number cannot be empty." )
            return
        } else if gender.isEmpty {
            alertViewModel.displayAlert(message: "Gender cannot be empty." )
            return
        } else {
            if firstName != profileData.firstName ||
                lastName != profileData.lastName ||
                mobileNumber != profileData.phoneNo ||
                gender.uppercased() != profileData.gender.uppercased() ||
                dob != profileData.dob  {
                updateCustomerProfile(profileImage: profileData.profileImageUrl ?? "")
            } else {
                alertViewModel.displayAlert(title: "Success", message: "Your profile has been updated successfully")
            }
            
        }
    }
}
